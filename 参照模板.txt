理解了你的需求，我们将分步骤实现一个基本的网络服务监测系统，包括以下几个主要部分：

1. **项目设置与准备**
2. **服务监测逻辑**
3. **多线程监测**
4. **数据库操作**
5. **报警通知**
6. **图形用户界面**

### 1. 项目设置与准备

首先，确保你已经安装了Qt开发环境。我们将使用Qt Creator作为IDE，它提供了创建、编译、运行Qt项目的便捷方式。此外，你需要安装数据库管理系统（如SQLite）和Qt支持的相应数据库驱动。

创建一个新的Qt Widgets Application项目，选择合适的Qt版本。

### 2. 服务监测逻辑

我们将定义一个`ServiceMonitor`类，它负责检查给定的网络服务是否在线。这里以HTTP服务为例，使用`QNetworkAccessManager`进行简单的GET请求。

```cpp
// ServiceMonitor.h
#ifndef SERVICEMONITOR_H
#define SERVICEMONITOR_H

#include <QObject>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QUrl>

class ServiceMonitor : public QObject {
    Q_OBJECT

public:
    explicit ServiceMonitor(QObject *parent = nullptr);
    void checkService(const QUrl &url);

private slots:
    void onFinished(QNetworkReply *reply);

private:
    QNetworkAccessManager *manager;
};

#endif // SERVICEMONITOR_H
```

```cpp
// ServiceMonitor.cpp
#include "ServiceMonitor.h"

ServiceMonitor::ServiceMonitor(QObject *parent) : QObject(parent) {
    manager = new QNetworkAccessManager(this);
    connect(manager, &QNetworkAccessManager::finished, this, &ServiceMonitor::onFinished);
}

void ServiceMonitor::checkService(const QUrl &url) {
    QNetworkRequest request(url);
    manager->get(request);
}

void ServiceMonitor::onFinished(QNetworkReply *reply) {
    if (reply->error() == QNetworkReply::NoError) {
        qDebug() << "Service available: " << reply->url().toString();
    } else {
        qDebug() << "Service unavailable: " << reply->url().toString();
        // Trigger alarm here
    }
    reply->deleteLater();
}
```

### 3. 多线程监测

对于每个需要监测的服务，我们将创建一个新的线程，在这个线程中运行`ServiceMonitor`的实例。Qt的`QThread`类可以帮助我们实现这一点。

```cpp
// Main.cpp
#include <QCoreApplication>
#include <QThread>
#include "ServiceMonitor.h"

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QThread *thread = new QThread();
    ServiceMonitor *monitor = new ServiceMonitor();
    monitor->moveToThread(thread);

    QObject::connect(thread, &QThread::started, [monitor](){
        monitor->checkService(QUrl("http://example.com"));
    });

    thread->start();

    return a.exec();
}
```

### 4. 数据库操作

你需要创建一个数据库和表格来存储服务的状态记录。在`ServiceMonitor`中，当服务状态改变时，你可以添加记录到数据库。这里不展示具体的数据库代码，因为它依赖于你选择的数据库系统和Qt的数据库驱动配置。

### 5. 报警通知

在服务不可用时，你可以使用Qt的网络功能发送邮件或短信（通过第三方API）。邮件发送可以通过SMTP实现，而短信通知通常需要使用如Twilio等服务的API。

### 6. 图形用户界面

利用Qt Designer设计GUI，你可以创建一个简单的界面来展示服务状态，并允许用户添加或移除要监控的服务。

```cpp
// MainWindow.cpp
#include "mainwindow.h"
#include "./ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow) {
    ui->setupUi(this);
}

MainWindow::~MainWindow() {
    delete ui;
}
```

这里只提供了实现网络服务监测系统核心功能的基本框架和示例代码。对于完整项目，你还需要详细设计数据库模型、完善